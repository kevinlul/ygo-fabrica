digraph {
  dpi = 150
  /* splines = ortho */
  fontname = "mono"
  rankdir = "LR"
  ranksep = 1
  edge [fontname = "Ubuntu Mono", dir="both"]
  node [
    shape = record,
    fontname = "Ubuntu Mono",
    style = filled,
    fillcolor = "#ffffcc",
    penwidth = 1.2
  ]
  ygofab [label=" YgoFab |
- PWD: string\l
- VERSION: string\l
  |
- get_pwd(): string\l
- print_header()\l
- is_inside_project(): boolean\l
- not_in_project_dialogue()\l
- display_help(header: boolean, msg: string)\l
- display_card_help(header: boolean)\l
- cmd_card_create()\l
- cmd_card_delete()\l
- cmd_card_edit()\l
- cmd_card_search()\l
- cmd_compose()\l
- cmd_config()\l
- cmd_export(flags: table)\l
- cmd_new(_, pack_name: string)\l
- cmd_sync(flags: table)\l
- init_interpreter()\l
  "]
  new [label=" New |
- GENFP: string\l
|
+ _(pwd: string, pack_name: string)\l
- check_name(pack_name: string)\l
- create_folder(folder: string)\l
- create_cdb(pack_name: string)\l
- copy_file(src: string, dst: string)\l
  "]
  logs [label=" Logs | |
+ assert(v: any, code: number, ...: string)\l
+ ok(...: string)\l
+ info(...: string)\l
  "]
  interpreter [label=" Interpreter |
- argtree: table\l
- commands: table\l
  |
- create_command(command: string, fn: function): table\l
+ add_command(command: string, fn: function, ...: any)\l
+ add_fallback(subcommand: string, fn: function)\l
+ parse(...: string): string?, table?, table?, table?\l
+ exec(command: table, args: table, flags: table): function\l
  "]
  config [label=" Config |
- FIELDS: table\l
  |
+ _(pwd: string)\l
+ get(pwd: string): table\l
+ get_one(pwd: string, key: string, id: string): table\l
+ get_default(pwd: string, key: string): string, table\l
+ get_defaults(pwd: string, key: string): table\l
+ get_all(pwd: string, key: string): table\l
- merge(dst: table, src: table)\l
- validate(cfg: table, fields?: table): table\l
- load_file(path: string): table\l
- format_list(cfg: table, title: string, fmt: function): string\l
- format(cfg: table): string\l
  "]
  sync [label=" Sync | |
+ _(pwd: string, flags: table)\l
- get_gamedirs(flag_g: table): table\l
- get_picset(flag_p: table): string, table\l
- clean(dir: string, names: string[])\l
- cp(src: string, dst: string): number\l
- copy_dir(pattern: string, src: string, dst: string, fclean: boolean, tags: string[])\l
- copy_scripts(gamedir: string, gpath: string, fclean: boolean)\l
- copy_pics(gamedir: string, gpath: string, picset: string, pscfg: table, fclean: boolean)\l
- copy_expansion(gamedir: string, gpath: string)\l
  "]
  export [label=" Export | |
+ _(pwd: string, flags: table)\l
- get_picsets(flag_p: table): table\l
- get_outdir(flag_o: table): string\l
- get_output(outdir: string, pack_name: string, picset: string): string, string\l
- create_zip(fp: string): ZipStream\l
- reader(fp: string, istext: boolean): table, function\l
- add_dir(pattern: string, zipfile: ZipStream, zipdir: string, tag: string)\l
- add_scripts(zipname: string, zipfile: ZipStream)\l
- add_pics(zipname: string, zipfile: ZipStream, picset: string, pscfg: table)\l
- add_expansion(zipname: string, zipfile: ZipStream, pack_name: string)\l
  "]
  compose [label=" Compose | |
+ _(pwd: string, flags: table)\l"]
  composer [label=" Composer "]

  subgraph dep {
    edge [ style = "dashed", arrowhead = "empty", arrowtail = "none" ]
    new -> logs
    config -> logs
    ygofab -> {
      logs
      new
      config
      sync
      export
      compose
    }
    sync -> {
      config
      logs
    }
    export -> {
      config
      logs
    }
    compose -> {
      config
      logs
      composer
    }
  }
  ygofab -> interpreter [
    taillabel="1"
    headlabel="- interpreter\r1\r"
    arrowtail="odiamond"
    arrowhead="none"
  ]
}
